{"version":3,"sources":["mycomponents/mycomponent.js","App.js","serviceWorker.js","index.js"],"names":["MyComponent","_this","this","react_default","a","createElement","className","onClick","props","decreaseCounter","counter","increaseCounter","Component","connect","state","dispatch","type","initialState","store","createStore","arguments","length","undefined","App","es","mycomponent","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6QAGMA,mLAEK,IAAAC,EAAAC,KACP,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQE,QAAS,kBAAMN,EAAKO,MAAMC,oBAAlC,KACAN,EAAAC,EAAAC,cAAA,SAAIH,KAAKM,MAAME,SACfP,EAAAC,EAAAC,cAAA,UAAQE,QAAS,kBAAMN,EAAKO,MAAMG,oBAAlC,aAPkBC,aA4BXC,kBAdf,SAAyBC,GACvB,MAAO,CACLJ,QAASI,EAAMJ,UAKnB,SAA4BK,GAC1B,MAAO,CACLJ,gBAAkB,kBAAMI,EAAS,CAACC,KAAM,sBACxCP,gBAAkB,kBAAMM,EAAS,CAACC,KAAM,wBAI7BH,CAA6Cb,UCvBtDiB,EAAe,CACnBP,QAAU,GAeNQ,EAAQC,YAXE,WAAkC,IAAjCL,EAAiCM,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBH,EACvB,QADgDG,UAAAC,OAAA,EAAAD,UAAA,QAAAE,GAClCN,MACZ,IAAK,mBACH,MAAO,CAACN,QAASI,EAAMJ,QAAU,GACnC,IAAK,mBACH,MAAO,CAACA,QAASI,EAAMJ,QAAU,GAErC,OAAOI,IAkBMS,mLATX,OAEEpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAUN,MAAOA,GACff,EAAAC,EAAAC,cAACoB,EAAD,cANUb,aCdEc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b7672237.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nclass MyComponent extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <button onClick={() => this.props.decreaseCounter()}>-</button>\r\n        <p>{this.props.counter}</p>\r\n        <button onClick={() => this.props.increaseCounter()}>+</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//Map app state to component props\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    counter: state.counter\r\n  }\r\n}\r\n\r\n//The Dispatcher\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    increaseCounter : () => dispatch({type: 'INCREASE_COUNTER'}),\r\n    decreaseCounter : () => dispatch({type: 'DECREASE_COUNTER'}),\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MyComponent);\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport MyComponent from './mycomponents/mycomponent';\nimport { createStore }  from 'redux';\nimport { Provider } from 'react-redux';\n\n\n//Initial State\nconst initialState = {\n  counter : 0\n}\n\n//The reducer\nconst reducer = (state = initialState, action) => {\n  switch(action.type){\n    case 'INCREASE_COUNTER':\n      return {counter: state.counter + 1};\n    case 'DECREASE_COUNTER':\n      return {counter: state.counter - 1};\n  }\n  return state;\n}\n\n//The Store \nconst store = createStore(reducer);\n\nclass App extends Component {\n\n  render() {\n    return (\n      //The app state provider\n      <Provider store={store}>\n        <MyComponent/>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}